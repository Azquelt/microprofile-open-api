//
// Copyright (c) 2016-2017 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

[[release_notes_20]]
== Release Notes for Microprofile OpenAPI 2.0

A full list of changes delivered in the 2.0 release can be found at link:https://github.com/eclipse/microprofile-open-api/milestone/2?closed=1[MicroProfile OpenAPI 2.0 Milestone].

=== Incompatible Changes

* Model interfaces that were deprecated in 1.1 have been removed:
  ** `Scopes` - this interface was replace with `Map<String, ServerVariable>` because it did not need to be extensible (link:https://github.com/eclipse/microprofile-open-api/issues/328[328])
  ** `ServerVariables` - this interface was replace with `Map<String, ServerVariable>` because it did not need to be extensible (link:https://github.com/eclipse/microprofile-open-api/issues/245[245])

* Model interfaces that are not extensible no longer extend `java.util.Map`:
  ** `APIResponses` (link:https://github.com/eclipse/microprofile-open-api/issues/248[248])
  ** `Callback` (link:https://github.com/eclipse/microprofile-open-api/issues/248[248])
  ** `Content` (link:https://github.com/eclipse/microprofile-open-api/issues/248[248])
  ** `Path` (link:https://github.com/eclipse/microprofile-open-api/issues/248[248])
  ** `SecurityRequirement` (link:https://github.com/eclipse/microprofile-open-api/issues/248[248])

* Methods on model interfaces that were deprecated) in 1.1 have been removed:
  ** APIResponses
    *** `APIResponses#addApiResponse(String name, APIResponse apiResponse)` - use `APIResponses#addAPIResponse(String, APIResponse)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/229[229])
    *** `APIResponses#get(Object key)` - use `APIResponses#getAPIResponse(String)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/248[248])
    *** `APIResponses#containsKey(Object key)` - use `APIResponses#hasAPIResponse(String)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/248[248])
    *** `APIResponses#put(String key, PathItem value)` - use `APIResponses#addAPIResponse(String, APIResponse)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/248[248])
    *** `APIResponses#putAll(Map<? extends String, ? extends PathItem> m)` - use `APIResponses#setAPIResponses(Map)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/248[248])
    *** `APIResponses#remove(Object key)` - use `APIResponses#removeAPIResponse(String)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/248[248])
  ** Callback
    *** `Callback#get(Object key)` - use `Callback#getPathItem(String)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/248[248])
    *** `Callback#containsKey(Object key)` - use `Callback#hasPathItem(String)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/248[248])
    *** `Callback#put(String key, PathItem value)` - use `Callback#addPathItem(String, PathItem)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/248[248])
    *** `Callback#putAll(Map<? extends String, ? extends PathItem> m)` - use `Callback#setPathItems(Map)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/248[248])
    *** `Callback#remove(Object key)` - use `Callback#removePathItem(String)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/248[248])
  ** Content
    *** `Content#get(Object key)` - use `Content#getMediaType(String)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/248[248])
    *** `Content#containsKey(Object key)` - use `Content#hasMediaType(String)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/248[248])
    *** `Content#put(String key, PathItem value)` - use `Content#addMediaType(String, MediaType)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/248[248])
    *** `Content#putAll(Map<? extends String, ? extends PathItem> m)` - use `Content#setMediaTypes(Map)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/248[248])
    *** `Content#remove(Object key)` - use `Content#removeMediaType(String)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/248[248])
  ** OASFactory
    *** `OASFactory#createScopes` - use `Map<String, String>` for scopes instead (link:https://github.com/eclipse/microprofile-open-api/issues/328[328])
    *** `OASFactory#createServerVariables` - use use `Map<String, ServerVariable>` for server variables instead (link:https://github.com/eclipse/microprofile-open-api/issues/245[245])
  ** OAuthFlow
    *** `OAuthFlow#setScopes(Scopes scopes)` - use `OAuthFlow#setScopes(Map)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/328[328])
    *** `OAuthFlow#scopes(Scopes scopes)` - use `OAuthFlow#scopes(Map)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/328[328])
  ** OpenAPI
    *** `OpenAPI#path(String name, PathItem path)` - use `Paths#addPathItem(String, PathItem)` on `OpenAPI#getPaths` instead (link:https://github.com/eclipse/microprofile-open-api/issues/247[247])
  ** Path
    *** `Path#get(Object key)` - use `Path#getPathItem(String)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/248[248])
    *** `Path#containsKey(Object key)` - use `Path#hasPathItem(String)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/248[248])
    *** `Path#put(String key, PathItem value)` - use `Path#addPathItem(String, PathItem)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/248[248])
    *** `Path#putAll(Map<? extends String, ? extends PathItem> m)` - use `Path#setPathItems(Map)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/248[248])
    *** `Path#remove(Object key)` - use `Path#removePathItem(String)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/248[248])
  ** PathItem
    *** `PathItem#readOperations` - use `Map#values()` on `PathItem#getOperations()` instead (link:https://github.com/eclipse/microprofile-open-api/pull/256[256])
    *** `PathItem#readOperationsMap` - use `PathItem#getOperations()` instead (link:https://github.com/eclipse/microprofile-open-api/pull/256[256])
  ** Schema
    *** `Schema#getAdditionalProperties` - use `Schema#getAdditionalPropertiesSchema()` or `Schema#getAdditionalPropertiesBoolean()` instead (link:https://github.com/eclipse/microprofile-open-api/issues/257[257], link:https://github.com/eclipse/microprofile-open-api/pull/281[281])
    *** `Schema#setAdditionalProperties(Schema additionalProperties)` - use `Schema#setAdditionalPropertiesSchema(Schema)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/257[257], link:https://github.com/eclipse/microprofile-open-api/pull/281[281])
    *** `Schema#setAdditionalProperties(Boolean additionalProperties)` - use `Schema#setAdditionalPropertiesBoolean(Boolean)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/257[257], link:https://github.com/eclipse/microprofile-open-api/pull/281[281])
    *** `Schema#additionalProperties(Schema additionalProperties)` - use `Schema#additionalPropertiesSchema(Schema)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/257[257], link:https://github.com/eclipse/microprofile-open-api/pull/281[281])
    *** `Schema#additionalProperties(Boolean additionalProperties)` - use `Schema#additionalPropertiesBoolean(Boolean)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/257[257], link:https://github.com/eclipse/microprofile-open-api/pull/281[281])
  ** SecurityRequirement
    *** `SecurityRequirement#get(Object key)` - use `SecurityRequirement#getScheme(String)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/248[248])
    *** `SecurityRequirement#containsKey(Object key)` - use `SecurityRequirement#hasScheme(String)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/248[248])
    *** `SecurityRequirement#put(String key, PathItem value)` - use `SecurityRequirement#addScheme(String, List)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/248[248])
    *** `SecurityRequirement#putAll(Map<? extends String, ? extends PathItem> m)` - use `SecurityRequirement#setSchemes(Map)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/248[248])
    *** `SecurityRequirement#remove(Object key)` - use `SecurityRequirement#removeScheme(String)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/248[248])
  ** Server
    *** `Server#setVariables(ServerVariables variables)` - use `Server#setVariables(Map)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/245[245])
    *** `Server#variables(ServerVariables variables)` - use `Server#variables(Map)` instead (link:https://github.com/eclipse/microprofile-open-api/issues/245[245])

=== API/SPI Changes

* The `@SchemaProperty` annotation has been added to allow the properties for a schema to be defined inline. (link:https://github.com/eclipse/microprofile-open-api/issues/360[360]). For example:
```
    @Schema(properties={
        @SchemaProperty(name="creditCard", required=true),
        @SchemaProperty(name="departureFlight", description="The departure flight information."),
        @SchemaProperty(name="returningFlight")
    })
```

* The `@RequestBodySchema` annotation has been added to provide a shorthand mechanism to specify the schema for a request body (link:https://github.com/eclipse/microprofile-open-api/issues/363[363]). For example:
```
    @RequestBodySchema(MyRequestObject.class)
```

* The `@APIResponseSchema` annotation has been added to provide a shorthand mechanism to specify the schema for a response body (link:https://github.com/eclipse/microprofile-open-api/issues/363[363]). For example:
```
    @APIResponseSchema(MyResponseObject.class)
```

* The `mp.openapi.schema.*` MicroProfile Config property has been added to allow the schema for a specific class to be specified. This property would typically be used in cases where the application developer does not have access to the source code of a class (link:https://github.com/eclipse/microprofile-open-api/issues/364[364]). For example:
```
    mp.openapi.schema.java.time.Instant = { \
        "name": "EpochSeconds", \
        "type": "number", \
        "format": "int64", \
        "title": "Epoch Seconds", \
        "description": "Number of seconds from the epoch of 1970-01-01T00:00:00Z" \
    }
```

=== Functional Changes

* Getter methods on model interfaces that return a list or map now return a copy of the list/map containing the same items. This list/map CAN be immutable. (link:https://github.com/eclipse/microprofile-open-api/issues/240[240])

* Setter methods on model interfaces that take a list or a map as a parameter MUST not use the list/map instance directly (link:https://github.com/eclipse/microprofile-open-api/issues/284[284])

=== Other Changes

* JavaDoc updates to clarify the behaviour of getter methods on model interfaces that return a list or map ((link:https://github.com/eclipse/microprofile-open-api/issues/240[240]), link:https://github.com/eclipse/microprofile-open-api/pull/288[288])

* TCK updates updates to verify that getter methods on model interfaces return a list or map, return a copy of underlying collection ((link:https://github.com/eclipse/microprofile-open-api/issues/240[240]), link:https://github.com/eclipse/microprofile-open-api/pull/288[288])

[[release_notes_11]]
== Release Notes for Microprofile OpenAPI 1.1

Changes include:

* the addition of the JAXRS 2.1 `PATCH` method

* automatic hide MicroProfile Rest Client interfaces

* `OASFactoryResolver` is now a proper `SPI` artifact

* builder methods now have default implementations

* `@Content` now supports a singular `example` field

* `@Extension` now has a `parseValue` field for complex values

* TCK updated to support newer `3.0.x` versions

* overall Javadoc enhancements (classes and packages)

* various other minor improvements to the annotations, models and TCK

** bug fixes, documentation updates, more convenience methods, deprecations, etc.

[[release_notes_10]]
== Release Notes for MicroProfile OpenAPI 1.0

First official release of MP OpenAPI.  Highlights of the release:

* set of annotations that covers the entire OpenAPI v3 specification when combined
with JAX-RS annotations.

* set of OpenAPI v3 models covering the entire OpenAPI v3 specification, with
corresponding APIs to provide a bootstrap or complete model tree.

* configuration injected via MicroProfile Config specification.

* ability to provide static (partial or complete) OpenAPI v3 files.

* definition of an HTTP endpoint, `/openapi`, that provides YAML and JSON representations
of the generated OpenAPI v3 document.
